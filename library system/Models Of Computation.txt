Computer science is the study of computers and programs the collections of instructions that direct the activity of computers Although computers are made of simple elements the tasks they perform are often very complex The great disparity between the simplicity of computers and the complexity of computational tasks offers intellectual challenges of the highest order It is the models and methods of analysis developed by computer science to meet these challenges that are the subject of theoretical computer science Computer scientists have developed models for machines such as the random access and Turing machines for languages such as regular and context free languages for programs such as straight line and branching programs and for systems of programs such as compilers and operating systems Models have also been developed for data structures such as heaps and for databases such as the relational and object oriented databases Methods of analysis have been developed to study the efficiency of algorithms and their data structures the expressibility of languages and the capacity of computer architectures to recognize them the classification of problems by the time and space required to solve them their inherent complexity and limits that hold simultaneously on computational resources for particular problems This book examines each of these topics in detail except for the first analysis of algorithms and data structures which it covers only briefly This chapter provides an overview of the book Except for the mathematical preliminaries the topics introduced here are revisited later Theoretical computer science uses models and analysis to study computers and computation It thus encompasses the many areas of computer science sufficiently well developed to have models and methods of analysis This includes most areas of the field TURING AND CHURCH Theoretical computer science emerged primarily from the work of Alan Turing and Alonzo Church in 1936 although many others such as Russell Hilbert and Boole were important precursors Turing and Church introduced formal computational models the Turing machine and lambda calculus showed that some well stated computational problems have no solution and demonstrated the existence of universal computing machines machines capable of simulating every other machine of their type Turing and Church were logicians their work reflected the concerns of mathematical logic The origins of computers predate them by centuries going back at least as far as the abacus if we call any mechanical aid to computation a computer A very important contribution to the study of computers was made by Charles Babbage who in 1836 completed the design of his first programmable Analytical Engine a mechanical computer capable of arithmetic operations under the control of a sequence of punched cards an idea borrowed from the Jacquard loom A notable development in the history of computers but one of less significance was the 1938 demonstration by Claude Shannon that Boolean algebra could be used to explain the operation of relay circuits a form of electromechanical computer He was later to develop his profound mathematical theory of communication in 1948 as well as to lay the foundations for the study of circuit complexity in 1949 FIRST COMPUTERS In 1941 Konrad Zuse built the Z3 the first general purpose program controlled computer a machine constructed from electromagnetic relays The Z3 read programs from a punched paper tape In the mid 1940s the first programmable electronic com puter using vacuum tubes the ENIAC was developed by Eckert and Mauchly Von Neu mann, in a very influential paper codified the model that now carries his name With the invention of the transistor in 1947 electronic computers were to become much smaller and more powerful than the 30 ton ENIAC The microminiaturization of transistors continues today to produce computers of ever increasing computing power in ever-shrinking packages EARLY LANGUAGE DEVELOPMENT The first computers were very difficult to program cables were plugged and unplugged on the ENIAC Later programmers supplied commands by typing in sequences of 0’s and 1’s the machine language of computers A major contribution of the 1950s was the development of programming languages such as FORTRAN COBOL and LISP These languages allowed programmers to specify commands in mnemonic code and with high level constructs such as loops arrays and procedures As languages were developed it became important to understand their expressiveness as well as the characteristics of the simplest computers that could translate them into machine language As a consequence formal languages and the automata that recognize them became an important topic of study in the 1950s Nondeterministic models models that may have more than one possible next state for the current state and input were introduced during this time as a way to classify languages FINITE STATE MACHINES Occurring in parallel with the development of languages was the development of models for computers The 1950s also saw the formalization of the finite state machine also called the sequential machine the sequential circuit the concrete realization of a sequential machine and the pushdown automaton Rabin and Scott pioneered the use of analytical tools to study the capabilities and limitations of these models FORMAL LANGUAGES The late 1950s and 1960s saw an explosion of research on formal languages By 1964 the Chomsky language hierarchy consisting of the regular context free context sensitive and recursively enumerable languages was established as was the correspon dence between these languages and the memory organizations of machine types recognizing them namely the finite state machine the pushdown automaton the linear bounded automaton and the Turing machine Many variants of these standard grammars languages and machines were also examined COMPUTATIONAL COMPLEXITY The 1960s also saw the laying of the foundation for computational complexity with the classification of languages and functions by Hartmanis Lewis and Stearns and others of the time and space needed to compute them Hierarchies of problems were identified and speed up and gap theorems established This area was to flower and lead to many important discoveries including that by Cook and independently Levin of complete languages languages associated with many hard combinatorial and optimiza tion problems including the Traveling Salesperson problem the problem of determining the shortest tour of cities for which all intercity distances are given Karp was instrumental in demonstrating the importance of complete languages Because problems whose running time is exponential are considered intractable it is very important to know whether a string in complete languages can be recognized in a time polynomial in their length This is called the problem where is the class of deterministic polynomial time languages The complete languages were also identified in the 1970s these are the hardest languages to recognize on parallel machines COMPUTATION TIME AND CIRCUIT COMPLEXITY In the early 1970s the connection between computation time on Turing machines and circuit complexity was established thereby giving the study of circuits renewed importance and offering the hope that the problem could be resolved via circuit complexity PROGRAMMING LANGUAGE SEMANTICS The 1970s were a very productive period for formal methods in the study of programs and languages The area of programming language seman tics was very active models and denotations were developed to give meaning to the phrase programming language thereby putting language development on a solid footing Formal methods for ensuring the correctness of programs were also developed and applied to program development